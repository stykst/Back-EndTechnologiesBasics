{
	"info": {
		"_postman_id": "58970d1f-d9b8-4b8a-a440-79e017a51dc0",
		"name": "RevueCrafters",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19534884",
		"_collection_link": "https://eurosoftdesign.postman.co/workspace/ESD~92c96b6f-86b3-481d-8a90-c567aac0aa9c/collection/19534884-58970d1f-d9b8-4b8a-a440-79e017a51dc0?action=share&source=collection_link&creator=19534884"
	},
	"item": [
		{
			"name": "Login and Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct properties\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"email\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"password\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"accessToken\");\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"token\", pm.response.json().accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"email\": \"wolfgang.neo@dockerbike.com\",\r\n\"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/User/Authentication",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Revue",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const words = ['Epic', 'Fable', 'Odyssey', 'Realm', 'Empire', 'Chronicles', 'Voyage', 'Legacy', 'Tale', 'Saga'];\r",
							"const randomWord = words[Math.floor(Math.random() * words.length)];\r",
							"const randomSuffix = Math.floor(Math.random() * 1000);\r",
							"\r",
							"const randomTitle = randomWord + '_' + randomSuffix;\r",
							"\r",
							"pm.collectionVariables.set('randomTitle', randomTitle);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response has a success message\", function () {\r",
							"    pm.expect(responseJson.msg).to.eql(\"Successfully created!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Title matches expected title\", function () {\r",
							"    var expectedTitle = pm.variables.get(\"randomTitle\");\r",
							"    pm.expect(responseJson.revue.title).to.eql(expectedTitle);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"title\": \"{{randomTitle}}\",\r\n\"description\": \"Description for {{randomTitle}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Revue/Create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Revue",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all Revues",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"    pm.expect(pm.response.json().length).to.greaterThan(0);\r",
							"});\r",
							"\r",
							"var revues = pm.response.json();\r",
							"var lastRevue = revues[revues.length - 1]; // Accessing the last element of the array\r",
							"pm.collectionVariables.set(\"lastRevueId\", lastRevue.id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/Revue/All",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Revue",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit the Created Revue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"    \r",
							"pm.test(\"Response message is 'Successfully edited'\", function () {\r",
							"    pm.expect(jsonData.msg).to.eql(\"Edited successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Title matches expected title\", function () {\r",
							"    var expectedTitle = \"Edited \" + pm.variables.get(\"randomTitle\");\r",
							"    pm.expect(jsonData.revue.title).to.eql(expectedTitle);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Edited {{randomTitle}}\",\r\n  \"description\": \"Edited description fof {{randomTitle}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Revue/Edit?revueId={{lastRevueId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Revue",
						"Edit"
					],
					"query": [
						{
							"key": "revueId",
							"value": "{{lastRevueId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the Edited Revue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"    \r",
							"pm.test(\"Response message is 'The revue is deleted!'\", function () {\r",
							"    pm.expect(jsonData.msg).to.eql(\"The revue is deleted!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/Revue/Delete?revueId={{lastRevueId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Revue",
						"Delete"
					],
					"query": [
						{
							"key": "revueId",
							"value": "{{lastRevueId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://d2925tksfvgq8c.cloudfront.net",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "lastRevueId",
			"value": ""
		}
	]
}