{
	"info": {
		"_postman_id": "f286f4ce-9787-42e4-aba7-7e1819179bc6",
		"name": "Idea Center",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19534884",
		"_collection_link": "https://eurosoftdesign.postman.co/workspace/ESD~92c96b6f-86b3-481d-8a90-c567aac0aa9c/collection/19534884-f286f4ce-9787-42e4-aba7-7e1819179bc6?action=share&source=collection_link&creator=19534884"
	},
	"item": [
		{
			"name": "Login and Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has correct properties\", () => {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"email\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"password\");\r",
							"    pm.expect(pm.response.json()).to.have.property(\"accessToken\");\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"token\", pm.response.json().accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"jasiel.anvith@dockerbike.com\",\r\n    \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/User/Authentication",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"User",
						"Authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a New Idea",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const words = ['Epic', 'Fable', 'Odyssey', 'Realm', 'Empire', 'Chronicles', 'Voyage', 'Legacy', 'Tale', 'Saga'];\r",
							"const randomWord = words[Math.floor(Math.random() * words.length)];\r",
							"const randomSuffix = Math.floor(Math.random() * 1000);\r",
							"\r",
							"const randomTitle = randomWord + ' ' + randomSuffix;\r",
							"\r",
							"pm.collectionVariables.set('randomTitle', randomTitle);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response has a success message\", function () {\r",
							"    pm.expect(responseJson.msg).to.eql(\"Successfully created!\");\r",
							"    pm.expect(responseJson.idea).to.have.property('title');\r",
							"    pm.expect(responseJson.idea).to.have.property('description');\r",
							"});\r",
							"\r",
							"pm.test(\"Title matches the generated randomTitle\", function () {\r",
							"    var randomTitle = pm.collectionVariables.get(\"randomTitle\");\r",
							"    pm.expect(responseJson.idea.title).to.eql(randomTitle);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{randomTitle}}\",\r\n    \"url\": \"\",\r\n    \"description\": \"New Idea for exam preparation\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Create"
					]
				}
			},
			"response": []
		},
		{
			"name": "List all Ideas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function() {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"    pm.expect(pm.response.json().length).to.greaterThan(0);\r",
							"})\r",
							"\r",
							"pm.test(\"Extract ID of the last created idea\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    var lastIdea = responseData[responseData.length - 1];\r",
							"    var lastIdeaId = lastIdea.id;\r",
							"    pm.collectionVariables.set(\"lastIdeaId\", lastIdeaId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/Idea/All",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"All"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit the Last Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"    \r",
							"pm.test(\"Response message is as expected\", function () {\r",
							"    pm.expect(jsonData.msg).to.eql(\"Edited successfully\");\r",
							"   });\r",
							"\r",
							"   pm.test(\"Title is correctly changed\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.idea.title).to.eql(\"CHANGED IDEA\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"CHANGED IDEA\",\r\n    \"url\": \"\",\r\n    \"description\": \"CHANGED IDEA DESCRIPTION\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/Idea/Edit?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Edit"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the Edited Idea",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseBody = pm.response.text();\r",
							"\r",
							"pm.test(\"Response body is a string'\", function () {\r",
							"    pm.expect(typeof responseBody).to.eql('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Message is 'The idea is deleted!'\", function () {\r",
							"    pm.expect(responseBody).to.eql(\"The idea is deleted!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/Idea/Delete?ideaId={{lastIdeaId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"Idea",
						"Delete"
					],
					"query": [
						{
							"key": "ideaId",
							"value": "{{lastIdeaId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://softuni-qa-loadbalancer-2137572849.eu-north-1.elb.amazonaws.com:84",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "randomTitle",
			"value": ""
		},
		{
			"key": "lastIdeaId",
			"value": ""
		}
	]
}